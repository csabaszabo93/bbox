plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

configurations {
    soap
    jaxb
}

dependencies {
    soap project(":schema")
    jaxb("org.glassfish.jaxb:jaxb-xjc")

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'wsdl4j:wsdl4j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
    main {
        java {
            srcDirs "$projectDir/src/main/java", "$projectDir/build/generated/jaxb"
        }
        resources {
            srcDirs "$projectDir/src/main/resources"
        }
    }
    test {
        java {
            srcDirs "$projectDir/src/test/java"
        }
        resources {
            srcDirs "$projectDir/src/test/resources"
        }
    }
}

task genJaxb {
    def sourcesDir = "$projectDir/build/generated/jaxb"

    outputs.dir sourcesDir

    doLast() {
        def schema = zipTree(configurations.soap.singleFile).matching {
            include '**/domain.xml'
        }.files.first().path
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }
        }
    }
}

compileJava.dependsOn genJaxb
